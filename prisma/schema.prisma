generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String          @id @default(cuid())
    isOnboarded   Boolean         @default(false)
    firstName     String?
    lastName      String?
    address       String?
    email         String          @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    invoices      Invoice[]
    accounts      Account[]
    Authenticator Authenticator[]
    sessions      Session[]
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

model Authenticator {
    credentialID         String  @unique
    userId               String
    providerAccountId    String
    credentialPublicKey  String
    counter              Int
    credentialDeviceType String
    credentialBackedUp   Boolean
    transports           String?
    user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([userId, credentialID])
}

model Invoice {
    id            String        @id @default(uuid())
    invoiceNumber Int           @default(autoincrement())
    invoiceName   String
    dueDate       DateTime
    currency      Currency     @relation(fields: [currencyId], references: [id], onDelete: Restrict)
    currencyId    Int
    status        InvoiceStatus @default(PENDING)
    fromName      String
    fromEmail     String
    fromAddress   String
    toName        String
    toEmail       String
    toAddress     String
    items         Item[]
    subTotal      Decimal
    discount      Decimal
    total         Decimal
    note          String?       @db.Text
    createdAt     DateTime      @default(now())
    user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String
}

model Currency {
    id      Int       @unique @default(autoincrement())
    name    String    @unique
    title   String
    rate    Decimal
    Invoice Invoice[]
}

model Item {
    id          String  @unique @default(uuid())
    description String
    quantity    Int
    rate        Decimal
    amount      Decimal
    invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    invoiceId   String
}

enum InvoiceStatus {
    PAID
    PENDING
}
